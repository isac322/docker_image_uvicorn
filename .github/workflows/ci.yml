name: ci

on:
  push:
    branches:
      - master
  pull_request:

jobs:
  uvicorn_version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.uvicorn_version.outputs.version }}
    steps:
      - uses: actions/checkout@v2
      - name: Get uvicorn version
        id: uvicorn_version
        run: |
          VERSION=$(python -c "from pkg_resources import parse_requirements; print(next(filter(lambda r: r.name == 'uvicorn', parse_requirements(open('requirements-essential.in').read()))).specs[0][1])")
          echo $VERSION
          echo "::set-output name=version::${VERSION}"
  docker:
    runs-on: ubuntu-latest
    needs: uvicorn_version
    env:
      PLATFORMS: linux/amd64,linux/arm64/v8,linux/386,linux/arm/v7
      LATEST_PYVER: 3.10
      BASE_EXT_TYPE: essential
      BASE_PYIMG_TYPE: alpine
      DOCKERHUB_USERNAME: isac322
    strategy:
      matrix:
        python_ver: ["3.7", "3.8", "3.9", "3.10"]
        python_img_type: [alpine, slim]
        extra_type: [performance, essential, standard]
    steps:
      - uses: actions/checkout@v2
      - uses: actions/github-script@v5
        id: my-script
        with:
          result-encoding: string
          # language=JavaScript
          script: |
            const base_elems = [
                'py${{ env.LATEST_PYVER }}',
                '${{ env.BASE_PYIMG_TYPE }}',
                '${{ needs.uvicorn_version.outputs.version }}',
                '${{ env.BASE_EXT_TYPE }}'
            ];

            const orig = new Set(['py${{ matrix.python_ver }}', '${{ matrix.python_img_type }}', '${{ needs.uvicorn_version.outputs.version }}', '${{ matrix.extra_type }}']);
            const tags = new Set();

            function collectTags(tmp) {
                if (tmp.size === 0) {
                    tags.add('latest');
                    return;
                }
                const tag = Array.from(tmp).join('-');
                if (tags.has(tag)) return;
                tags.add(tag);

                for (const e of base_elems) {
                    if (tmp.has(e)) {
                        const s = new Set(tmp);
                        s.delete(e);
                        collectTags(s);
                    }
                }
            }

            collectTags(orig);
            return Array.from(tags).join('\n')

      - name: Docker meta
        id: docker_meta
        uses: crazy-max/ghaction-docker-meta@v3.6.2
        with:
          images: ${{ env.DOCKERHUB_USERNAME }}/uvicorn
          flavor: |
            latest=false
          tags: |
            ${{ steps.my-script.outputs.result }}
          labels: |
            org.opencontainers.image.title=uvicorn
            org.opencontainers.image.version=${{ needs.uvicorn_version.outputs.version }}
      - name: Set up QEMU
        id: qemu
        uses: docker/setup-qemu-action@v1
        with:
          platforms: ${{ env.PLATFORMS }}
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ env.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          build-args: |
            PYTHON_VER=${{ matrix.python_ver }}
            PYTHON_IMG_TYPE=${{ matrix.python_img_type }}
            EXT_TYPE=${{ matrix.extra_type }}
          push: ${{ github.event_name != 'pull_request' }}
          platforms: ${{ env.PLATFORMS }}
          tags: ${{ steps.docker_meta.outputs.tags }}
          labels: ${{ steps.docker_meta.outputs.labels }}
          cache-from: type=registry,ref=${{ env.DOCKERHUB_USERNAME }}/uvicorn:py${{ matrix.python_ver }}-${{ matrix.python_img_type }}-${{ matrix.extra_type }}
          cache-to: type=registry,ref=${{ env.DOCKERHUB_USERNAME }}/uvicorn:_buildcache-py${{ matrix.python_ver }}-${{ matrix.python_img_type }}-${{ matrix.extra_type }},mode=max
      - name: Update repo description
        if: github.event_name != 'pull_request'
        uses: peter-evans/dockerhub-description@v2
        with:
          username: ${{ env.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}
          repository: ${{ env.DOCKERHUB_USERNAME }}/uvicorn
